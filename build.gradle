buildscript {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'com.qaprosoft'
version = "${version != 'unspecified' ? version : '1.0-SNAPSHOT'}"

sourceCompatibility = '8'

repositories {
    mavenCentral()
    jcenter()
}

ext {
    jacksonVersion = '2.9.9'
    apacheCommonsVersion = '3.9'
    jerseyVersion = '1.19.4'
    gensonVersion = '0.99'
    sjf4jVersion = '1.7.26'
    testngVersion = '6.14.3'
    apacheConfiguration2Version = '2.5'
    rabbitmqVersion = '5.7.2'
    log4jVersion = '1.2.17'
    awsVersion = '1.11.589'
    googleApiClientVersion = '1.30.2'
    googleServiceSheetsVersion = 'v4-rev581-1.25.0'
    lombokVersion = '1.18.8'
    javaxVersion = '2.0.1.Final'
    hibernateValidationVersion = '6.0.17.Final'
    apacheIoVersion = '1.3.2'
}

/* Investiagte that Google and Amazon clients can work without some inner dependencies exclusions */
dependencies {
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "org.apache.commons:commons-lang3:${apacheCommonsVersion}"
    implementation "com.sun.jersey:jersey-client:${jerseyVersion}"
    implementation "com.sun.jersey:jersey-json:${jerseyVersion}"
    implementation "com.owlike:genson:${gensonVersion}"
    implementation "org.slf4j:slf4j-api:${sjf4jVersion}"
    implementation "org.testng:testng:${testngVersion}"
    implementation "org.apache.commons:commons-configuration2:${apacheConfiguration2Version}"
    implementation "com.rabbitmq:amqp-client:${rabbitmqVersion}"
    implementation "log4j:log4j:${log4jVersion}"
    implementation "com.amazonaws:aws-java-sdk:${awsVersion}"
    implementation "com.google.api-client:google-api-client:${googleApiClientVersion}"
    implementation "com.google.apis:google-api-services-sheets:${googleServiceSheetsVersion}"
    implementation "javax.validation:validation-api:${javaxVersion}"
    implementation "org.hibernate:hibernate-validator:${hibernateValidationVersion}"
    implementation "org.apache.commons:commons-io:${apacheIoVersion}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'zafira-client'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Zafira :: Client'
                description = 'Java client allowing to communicate with Zafira via its REST API'
                url = 'https://qaprosoft.github.io/zafira/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'akhursevich'
                        name = 'Alex Khursevich'
                        email = 'alex@qaprosoft.com'
                    }
                }
                scm {
                    connection = 'https://github.com/qaprosoft/zafira-client.git'
                    developerConnection = 'git@github.com:qaprosoft/zafira-client.git'
                    url = 'https://qaprosoft.github.io/zafira/'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://ci.qaprosoft.com/nexus/content/repositories/snapshots/"
            credentials {
                username = version.endsWith('SNAPSHOT') ? project.property('publishing.snapshotRepository.username') : project.property('publishing.releaseRepository.username')
                password = version.endsWith('SNAPSHOT') ? project.property('publishing.snapshotRepository.password') : project.property('publishing.releaseRepository.password')
            }
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
